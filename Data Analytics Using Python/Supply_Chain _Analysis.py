#!/usr/bin/env python
# coding: utf-8

# # Supply Chain Data Analysis
# Project By Kunal Kakara

# #Questions
# 1.Make the visualization of the price of the product and the revenue generated by them
# 2.Analyze the sales by the product type
# 3.Find out the total revenue genertaed from shipping carriers
# 4.Analyze the revenue generated from the shipping carriers
# 5.Analyze the order quantity of each sku
# 6.Analyze the shipping cost of the carriers
# 7.Find out the cost distribution by transportation mode.
# 8.Analyzing the Defect Rate of the Product During Shipping
# 

# In[202]:


import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
pio.templates.default="plotly_white"
import warnings
warnings.filterwarnings('ignore')


# In[203]:


df=pd.read_csv("supply_chain_data.csv")


# In[204]:


df


# In[205]:


df.shape


# In[206]:


df.info()


# In[207]:


df.describe()


# In[208]:


df.isnull().sum()


# In[209]:


for col in df.describe(include='object').columns:
    print(col)
    print(df[col].unique())
    print("-"*50)


# In[ ]:





# In[210]:


fig=px.scatter(df,x='Price',y='Revenue generated',color='Product type',hover_data=['Number of products sold'],trendline='ols')
fig.show()


# In[211]:


#same graph using matplot lib
import matplotlib.pyplot as plt

# Sample data (replace these with your actual data)
product_types = df['Product type']
prices = df['Price']
revenue_generated = df['Revenue generated']
# Plotting
plt.figure(figsize=(12, 6))
plt.scatter(prices, revenue_generated, c=range(len(product_types)), cmap='viridis', s=100, alpha=0.7)

# Adding labels and title
plt.xlabel('Price')
plt.ylabel('Revenue Generated')
plt.title('Price vs Revenue Generated (by Product Type)')
plt.colorbar(label='Product Type')

# Annotating each point with product type
#for i, product in enumerate(product_types):
    #plt.annotate(product, (prices[i], revenue_generated[i]), textcoords="offset points", xytext=(0,10), ha='center')

# Display the plot
plt.grid(True)
plt.tight_layout()


# In[251]:


#Second Question
sales_data = df.groupby('Product type') ['Number of products sold'].sum().reset_index()
pie_chart = px.pie(sales_data, 
names='Product type',values='Number of products sold',
title='Sales by Product Type',
hover_data=['Number of products sold'],
hole=0.5,
color_discrete_sequence=px.colors.qualitative.Pastel)

pie_chart.update_traces (textposition='inside', textinfo='percent+label')

pie_chart.show()


# In[213]:


#Third Question
revenue = df.groupby('Shipping carriers') ['Revenue generated'].sum().reset_index()
revenue


# In[215]:


#Third Question
#Visualization using Matplot and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 4))
sns.barplot(x='Shipping carriers', y='Revenue generated', data=revenue)
plt.show()


# In[226]:


#Visualization using plotly
fig = px.bar(revenue, x='Shipping carriers', y='Revenue generated', title='Revenue Generated by Shipping Carriers',color='Shipping carriers')
fig.show()


# In[220]:


#Forth Question

Revenue_sku=px.line(df, x='SKU', y='Revenue generated', title='Revenue Generated by SkU')
Revenue_sku.show()


# In[225]:


#Fifth Question
fig = px.bar(df, x='SKU', y='Order quantities', title='Order Quantity of Each SKU',color='SKU')
fig.show()


# In[227]:


Shipping_Cost = df.groupby('Shipping carriers') ['Shipping costs'].sum().reset_index()
Shipping_Cost


# In[235]:


#Sixth Question
fig = px.bar(Shipping_Cost, x='Shipping carriers', y='Shipping costs', title='Shipping Carriers of Carriers',color="Shipping costs")
fig.show()


# In[236]:


Cost_Distribution=df.groupby('Transportation modes')['Costs'].sum().reset_index()
Cost_Distribution


# In[250]:


#Seventh Question
pie_chart = px.pie(Cost_Distribution, names='Transportation modes', values='Costs',
title='Cost Distribution',
hover_data=['Costs'],
hole=0.5,
color_discrete_sequence=px.colors.qualitative.Pastel)

pie_chart.update_traces (textposition='inside', textinfo='percent+label')

pie_chart.show()


# In[264]:


defect = df.groupby('Product type') ['Defect rates'].mean().reset_index()
defect


# In[265]:


fig = px.bar(defect, x='Product type', y='Defect rates', title='Defect Rate',color="Product type")
fig.show()


# In[ ]:




